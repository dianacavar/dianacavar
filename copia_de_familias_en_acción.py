# -*- coding: utf-8 -*-
"""Copia de Familias En Acción.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xXRMYvxFafNflQQ_QlHqRWA-e7esfm6U

## Beneficiarios de Familias en acción (Colombia)
"""



"""# Librerias"""

!pip install sodapy

import pandas as pd
from sodapy import Socrata
import numpy as np

"""# Lectura de la fuente de datos (Publica)"""

client = Socrata("www.datos.gov.co", None)
results = client.get("xfif-myr2", limit=1000) # Con limite de 1.000 filas (Filas 3,98M)
results_df = pd.DataFrame.from_records(results)

print(len(results_df))

# Muestra la cantidad de filas y columnas de DataFrame
rows = len(results_df.axes[0]) 
cols = len(results_df.axes[1]) 
  
print("Numero de Filas: " + str(rows)) 
print("Numero de Columnas: " + str(cols))

# Muestra las dos primeras filas del DataFrame
print(results_df.head(2))

# Muestra las dos ultimas filas del DataFrame
print(results_df.tail(2))

# Muestra los tipos de datos de cada una de las columnas del DataFrame
print(results_df.dtypes)

# Muestra el nombre de las columnas del DataFrame
print(results_df.columns)

"""# Limpieza de datos"""

# Convierte las columnas tipo objeto a fecha
results_df['fechainscripcionbeneficiario'] = pd.to_datetime(results_df['fechainscripcionbeneficiario'])
results_df['fechaultimobeneficioasignado'] = pd.to_datetime(results_df['fechaultimobeneficioasignado'])
print(results_df.dtypes)

# Crea la columna de año de la fecha de inscripcion
results_df["anoinscripcionbeneficiario"] = results_df['fechainscripcionbeneficiario'].dt.year
# Muestra cuantos años unicos hay en la columna
print(len(results_df["anoinscripcionbeneficiario"].unique()))
# Muestra cuales son los años unicos hay en la columna
print(results_df["anoinscripcionbeneficiario"].unique())

# Crea la columna de año de la fecha del ultimo beneficio asignado
results_df["anoultimobeneficioasignado"] = results_df['fechaultimobeneficioasignado'].dt.year
# Muestra cuantos años unicos hay en la columna
print(len(results_df["anoultimobeneficioasignado"].unique()))
# Muestra cuales son los meses unicos que hay en la columna
print(results_df["anoultimobeneficioasignado"].unique())

# Crea la columna de mes de la fecha de inscripcion
results_df["mesinscripcionbeneficiario"] = results_df['fechainscripcionbeneficiario'].dt.month
# Muestra cuantos meses unicos hay en la columna
print(len(results_df["mesinscripcionbeneficiario"].unique()))
# Muestra cuales son los meses unicos que hay en la columna
print(results_df["mesinscripcionbeneficiario"].unique())

# Crea la columna de mes de la fecha del ultimo beneficio asignado
results_df["mesultimobeneficioasignado"] = results_df['fechaultimobeneficioasignado'].dt.month
# Muestra cuantos meses unicos hay en la columna
print(len(results_df["mesultimobeneficioasignado"].unique()))
# Muestra cuales son los meses unicos que hay en la columna
print(results_df["mesultimobeneficioasignado"].unique())

# Convierte las columnas tipo objeto a entero
results_df['cantidaddebeneficiarios'] = results_df['cantidaddebeneficiarios'].astype('int')
print(results_df.dtypes)

# Muestra el total de datos por columna y el tipo de dato
results_df.info()

# Muestra cuantos datos unicos hay en la columna
print(len(results_df['bancarizado'].unique()))
# Muestra cuales son los datos unicos que hay en la columna
print(results_df['bancarizado'].unique())

# Muestra cuantos datos unicos hay en la columna
print(len(results_df['discapacidad'].unique()))
# Muestra cuales son los datos unicos que hay en la columna
print(results_df['discapacidad'].unique())

# Muestra cuantos datos unicos hay en la columna
print(len(results_df['estadobeneficiario'].unique()))
# Muestra cuales son los datos unicos que hay en la columna
print(results_df['estadobeneficiario'].unique())

# Muestra cuantos datos unicos hay en la columna
print(len(results_df['etnia'].unique()))
# Muestra cuales son los datos unicos que hay en la columna
print(results_df['etnia'].unique())

# Reemplaza el doble guion con uno solo
results_df['etnia'] = results_df['etnia'].replace('AFROCOLOMBIANO – NEGRO','AFROCOLOMBIANO - NEGRO')
print(len(results_df['etnia'].unique()))
print(results_df['etnia'].unique())

# Muestra cuantos datos unicos hay en la columna
print(len(results_df['genero'].unique()))
# Muestra cuales son los datos unicos que hay en la columna
print(results_df['genero'].unique())

# Muestra cuantos datos unicos hay en la columna
print(len(results_df['nivelescolaridad'].unique()))
# Muestra cuales son los datos unicos que hay en la columna
print(results_df['nivelescolaridad'].unique())

# Muestra cuantos datos unicos hay en la columna
print(len(results_df['nombredepartamentoatencion'].unique()))
# Muestra cuales son los datos unicos que hay en la columna
print(results_df['nombredepartamentoatencion'].unique())

# Muestra cuantos datos unicos hay en la columna
print(len(results_df['nombremunicipioatencion'].unique()))
# Muestra cuales son los datos unicos que hay en la columna
print(results_df['nombremunicipioatencion'].unique())

# Muestra cuantos datos unicos hay en la columna
print(len(results_df['pais'].unique()))
# Muestra cuales son los datos unicos que hay en la columna
print(results_df['pais'].unique())

# Pasa toda la columna a escribirse la primera letra en mayuscula y el resto en minuscula
results_df['pais'] = results_df['pais'].str.capitalize()
print(len(results_df['pais'].unique()))
print(results_df['pais'].unique())

# Muestra cuantos datos unicos hay en la columna
print(len(results_df['tipobeneficio'].unique()))
# Muestra cuales son los datos unicos que hay en la columna
print(results_df['tipobeneficio'].unique())

# Reemplaza los datos para verlos con un espacio en la mitad
results_df['tipobeneficio'] = results_df['tipobeneficio'].replace('EDUCACIÓN PRIMARIANUTRICIÓN MENOR','EDUCACIÓN PRIMARIA - NUTRICIÓN MENOR')
results_df['tipobeneficio'] = results_df['tipobeneficio'].replace('TRANSICIÓNNUTRICIÓN MENOR','TRANSICIÓN - NUTRICIÓN MENOR')

print(len(results_df['tipobeneficio'].unique()))
print(results_df['tipobeneficio'].unique())

# Muestra cuantos datos unicos hay en la columna
print(len(results_df['tipopoblacion'].unique()))
# Muestra cuales son los datos unicos que hay en la columna
print(results_df['tipopoblacion'].unique())

# Muestra cuantos datos unicos hay en la columna
print(len(results_df['rangobeneficioconsolidadoasignado'].unique()))
# Muestra cuales son los datos unicos que hay en la columna
print(results_df['rangobeneficioconsolidadoasignado'].unique())

# Muestra cuantos datos unicos hay en la columna
print(len(results_df['rangoultimobeneficioasignado'].unique()))
# Muestra cuales son los datos unicos que hay en la columna
print(results_df['rangoultimobeneficioasignado'].unique())

# Muestra cuantos datos unicos hay en la columna
print(len(results_df['rangoedad'].unique()))
# Muestra cuales son los datos unicos que hay en la columna
print(results_df['rangoedad'].unique())

# Muestra cuantos datos unicos hay en la columna
print(len(results_df['cantidaddebeneficiarios'].unique()))
# Muestra cuales son los datos unicos que hay en la columna
print(results_df['cantidaddebeneficiarios'].unique())

# Crea un DataFrame con las columnas necesarias
bd_df = results_df[['bancarizado','discapacidad','estadobeneficiario','etnia','fechainscripcionbeneficiario','genero','nivelescolaridad',
                      'nombredepartamentoatencion','nombremunicipioatencion','pais','tipobeneficio','tipopoblacion','rangobeneficioconsolidadoasignado',
                      'rangoultimobeneficioasignado','fechaultimobeneficioasignado','rangoedad','cantidaddebeneficiarios',
                      'anoinscripcionbeneficiario','anoultimobeneficioasignado','mesinscripcionbeneficiario','mesultimobeneficioasignado']]

# Exporta el DataFrame en un archivo csv
bd_df.to_csv('bd_familas_en_accion.csv')